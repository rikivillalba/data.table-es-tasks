set.seed(2383194)
smpl <- invisible(
IF_EDS_Validas_T1.PMAX
["T1R", on = "TARIFA"]
[ sample(.N, 500),
roll=T, nomatch = NULL,
.(PMAX = PMAX/1000, PMED = PMED*4*24*30/1000)])
plot(data=smpl, PMAX ~ PMED)
smpl.lm <- lm(data=smpl, PMAX ~ PMED)
seg <- segmented::segmented(smpl.lm)
# p[1:2] %*% c(1, p[4])
POT_CORTE <- as.list(coef(seg)) |> with(
`(Intercept)` + PMED * psi1.PMED)
plot(seg)
points(data=smpl, PMAX ~ PMED, col = alpha("darkgreen", 0.4))
summary(smpl.lm)
cat(paste("Potencia de corte:", POT_CORTE))
ggplot(IF_EDS_Validas_T1.PMAX, aes(PMAX/1000)) +
geom_histogram(binwidth = 0.2) +
facet_wrap(vars(TARIFA, ESTRATO), scales = "free") +
theme_minimal()
#---- graficar segmentada ----
set.seed(2383194)
smpl <- invisible(
IF_EDS_Validas_T1.PMAX
["T1R", on = "TARIFA"]
[ sample(.N, 500),
roll=T, nomatch = NULL,
.(PMAX = PMAX/1000, PMED = PMED*4*24*30/1000)])
plot(data=smpl, PMAX ~ PMED)
smpl.lm <- lm(data=smpl, PMAX ~ PMED)
seg <- segmented::segmented(smpl.lm)
# p[1:2] %*% c(1, p[4])
POT_CORTE <- as.list(coef(seg)) |> with(
`(Intercept)` + PMED * psi1.PMED)
plot(seg)
points(data=smpl, PMAX ~ PMED, col = alpha("darkgreen", 0.4))
summary(smpl.lm)
cat(paste("Potencia de corte:", POT_CORTE))
#---- graficar segmentada ----
library(segmented)
set.seed(2383194)
smpl <- invisible(
IF_EDS_Validas_T1.PMAX
["T1R", on = "TARIFA"]
[ sample(.N, 500),
roll=T, nomatch = NULL,
.(PMAX = PMAX/1000, PMED = PMED*4*24*30/1000)])
smpl.lm <- lm(data=smpl, PMAX ~ PMED)
{
npsi <- 1
seg <- segmented(smpl.lm, npsi = npsi)
seg.coef <- coef(seg)
seg.intercept <- intercept(seg)[[1]]
seg.break.PMED <- -diff(seg.intercept) / (c(seg.coef[2 + 1:npsi]))
seg.plot.data <- data.frame(
PMED = c(0, seg.break.PMED, max(smpl$PMED)))
seg.plot.data$PMAX <- predict(seg, seg.plot.data)
{ plot(seg.plot.data[, c("PMED", "PMAX")], col="darkgreen", type = "l")
points(smpl[,c("PMED", "PMAX")], col= alpha("black", 0.2)) }
}
summary(seg)
seg.plot.data
#---- graficar segmentada ----
library(segmented)
set.seed(2383194)
smpl <- invisible(
IF_EDS_Validas_T1.PMAX
["T1R", on = "TARIFA"]
[ sample(.N, 1500),
roll=T, nomatch = NULL,
.(PMAX = PMAX/1000, PMED = PMED*4*24*30/1000)])
#---- graficar segmentada ----
library(segmented)
set.seed(2383194)
smpl <- invisible(
IF_EDS_Validas_T1.PMAX
["T1R", on = "TARIFA"]
[ sample(.N, 1500, T) ,
roll=T, nomatch = NULL,
.(PMAX = PMAX/1000, PMED = PMED*4*24*30/1000)])
smpl.lm <- lm(data=smpl, PMAX ~ PMED)
{
npsi <- 1
seg <- segmented(smpl.lm, npsi = npsi)
seg.coef <- coef(seg)
seg.intercept <- intercept(seg)[[1]]
seg.break.PMED <- -diff(seg.intercept) / (c(seg.coef[2 + 1:npsi]))
seg.plot.data <- data.frame(
PMED = c(0, seg.break.PMED, max(smpl$PMED)))
seg.plot.data$PMAX <- predict(seg, seg.plot.data)
{ plot(seg.plot.data[, c("PMED", "PMAX")], col="darkgreen", type = "l")
points(smpl[,c("PMED", "PMAX")], col= alpha("black", 0.2)) }
}
summary(seg)
seg.plot.data
#---- graficar segmentada ----
library(segmented)
set.seed(2383194)
smpl <- invisible(
IF_EDS_Validas_T1.PMAX
["T1R", on = "TARIFA"]
[ sample(.N, 1500, T) ,
roll=T, nomatch = NULL,
.(PMAX = PMAX/1000, PMED = PMED*4*24*30/1000)])
smpl.lm <- lm(data=smpl, PMAX ~ PMED)
{
npsi <- 2
seg <- segmented(smpl.lm, npsi = npsi)
seg.coef <- coef(seg)
seg.intercept <- intercept(seg)[[1]]
seg.break.PMED <- -diff(seg.intercept) / (c(seg.coef[2 + 1:npsi]))
seg.plot.data <- data.frame(
PMED = c(0, seg.break.PMED, max(smpl$PMED)))
seg.plot.data$PMAX <- predict(seg, seg.plot.data)
{ plot(seg.plot.data[, c("PMED", "PMAX")], col="darkgreen", type = "l")
points(smpl[,c("PMED", "PMAX")], col= alpha("black", 0.2)) }
}
#---- graficar segmentada ----
library(segmented)
set.seed(2383194)
smpl <- invisible(
IF_EDS_Validas_T1.PMAX
["T1R", on = "TARIFA"]
[ sample(.N, 1500, T) ,
roll=T, nomatch = NULL,
.(PMAX = PMAX/1000, PMED = PMED*4*24*30/1000)])
smpl.lm <- lm(data=smpl, PMAX ~ PMED)
{
npsi <- 1
seg <- segmented(smpl.lm, npsi = npsi)
seg.coef <- coef(seg)
seg.intercept <- intercept(seg)[[1]]
seg.break.PMED <- -diff(seg.intercept) / (c(seg.coef[2 + 1:npsi]))
seg.plot.data <- data.frame(
PMED = c(0, seg.break.PMED, max(smpl$PMED)))
seg.plot.data$PMAX <- predict(seg, seg.plot.data)
{ plot(seg.plot.data[, c("PMED", "PMAX")], col="darkgreen", type = "l")
points(smpl[,c("PMED", "PMAX")], col= alpha("black", 0.2)) }
}
summary(seg)
seg.plot.data
#---- graficar segmentada ----
library(segmented)
set.seed(2383194)
smpl <- invisible(
IF_EDS_Validas_T1.PMAX
["T1R", on = "TARIFA"]
[PMED*4*24*30/1000 < 1000]
[ sample(.N, 500, T) ,
roll=T, nomatch = NULL,
.(PMAX = PMAX/1000, PMED = PMED*4*24*30/1000)])
smpl.lm <- lm(data=smpl, PMAX ~ PMED)
{
npsi <- 1
seg <- segmented(smpl.lm, npsi = npsi)
seg.coef <- coef(seg)
seg.intercept <- intercept(seg)[[1]]
seg.break.PMED <- -diff(seg.intercept) / (c(seg.coef[2 + 1:npsi]))
seg.plot.data <- data.frame(
PMED = c(0, seg.break.PMED, max(smpl$PMED)))
seg.plot.data$PMAX <- predict(seg, seg.plot.data)
{ plot(seg.plot.data[, c("PMED", "PMAX")], col="darkgreen", type = "l")
points(smpl[,c("PMED", "PMAX")], col= alpha("black", 0.2)) }
}
summary(seg)
seg.plot.data
#---- graficar segmentada ----
library(segmented)
set.seed(2383194)
smpl <- invisible(
IF_EDS_Validas_T1.PMAX
["T1R", on = "TARIFA"]
[PMED*4*24*30/1000 < 1000]
[ sample(.N, 500, T) ,
roll=T, nomatch = NULL,
.(PMAX = PMAX/1000, PMED = PMED*4*24*30/1000)])
smpl.lm <- lm(data=smpl, PMAX ~ PMED)
{
npsi <- 2
seg <- segmented(smpl.lm, npsi = npsi)
seg.coef <- coef(seg)
seg.intercept <- intercept(seg)[[1]]
seg.break.PMED <- -diff(seg.intercept) / (c(seg.coef[2 + 1:npsi]))
seg.plot.data <- data.frame(
PMED = c(0, seg.break.PMED, max(smpl$PMED)))
seg.plot.data$PMAX <- predict(seg, seg.plot.data)
{ plot(seg.plot.data[, c("PMED", "PMAX")], col="darkgreen", type = "l")
points(smpl[,c("PMED", "PMAX")], col= alpha("black", 0.2)) }
}
summary(seg)
seg.plot.data
rm(IF_EDS_Validas_T1)
gc()
IF_EDS_Validas_T1.PMAX[,unique(FECHA.HASTA - FECHA.DESDE)]
IF_EDS_Validas_T1.PMAX[,by=(FECHA.HASTA - FECHA.DESDE),.N]
IF_EDS_Validas_T1.PMAX[,by=(FECHA.HASTA - FECHA.DESDE),.N] |> View()
IF_EDS_Validas_T1.PMAX[FECHA.HASTA-FECHA.DESDE > 310, NIS ]
n = IF_EDS_Validas_T1.PMAX[FECHA.HASTA-FECHA.DESDE > 310, NIS ]
n = IF_EDS_Validas_T1.PMAX[FECHA.HASTA-FECHA.DESDE > 310, NIS ]
setwd("~\\..\\OneDrive - Enel Spa\\factu\\Facturaci√≥n 2023")
dt <- fread("DT.csv.gz")
dt <- fread("DT_RATIO.csv.gz")
gc()
dt <- dt[n,on="nis"]
dt <- dt[.(NIS=n),on="nis"]
dt <- dt[.(nis=n),on="nis"]
dt[,plot(consumo_ratio, PMAX)]
dt[,plot(p_ratio, PMAX)]
dt[IF_EDS_Validas_T1.PMAX, on = c("nis"="NIS"), PMAX := i.PMAX]
dt[,plot(p_ratio, PMAX)]
dt[,corr(p_ratio, PMAX)]
dt[,cor(p_ratio, PMAX)]
dt[,cor(.(p_ratio, PMAX))]
dt[,cor(.SD), .SDcols = c("p_ratio", "PMAX")]
dt[is.finite(p_ratio) & is.finite(PMAX),cor(.SD), .SDcols = c("p_ratio", "PMAX")]
dt[IF_EDS_Validas_T1.PMAX, on = c("nis"="NIS"), PMED := i.PMED]
dt[,p_ratio_PMAX := PMED / PMAX]
dt[is.finite(p_ratio) & is.finite(p_ratio_PMAX),
cor(.SD), .SDcols = c("p_ratio", "p_ratio_PMAX")]
dt[,plot(p_ratio, p_ratio_PMAX)]
dt[,.(range(p_ratio), range(p_ratio_PMAX))]
dt[is.finite(p_ratio) & is.finite(p_ratio_PMAX),
.(.N,range(p_ratio), range(p_ratio_PMAX))]
dt[is.finite(p_ratio) & is.finite(p_ratio_PMAX),
.(.N, p_ratio =range(p_ratio), p_ratio_PMAX = range(p_ratio_PMAX))]
dt[IF_EDS_Validas_T1.PMAX, on = c("nis"="NIS"), PMAX := i.PMAX/1000]
dt[IF_EDS_Validas_T1.PMAX, on = c("nis"="NIS"), PMED := i.PMED*4*24*30/1000]
dt[,PMAX := NULL]
dt[,PMED := NULL]
dt[IF_EDS_Validas_T1.PMAX, on = c("nis"="NIS"), PMAX := i.PMAX/1000]
dt[IF_EDS_Validas_T1.PMAX, on = c("nis"="NIS"), PMED := i.PMED*4*24*30/1000]
dt[,p_ratio_PMAX := PMED / PMAX]
dt[,plot(p_ratio, p_ratio_PMAX)]
dt[is.finite(p_ratio) & is.finite(p_ratio_PMAX),
.(.N, p_ratio =range(p_ratio), p_ratio_PMAX = range(p_ratio_PMAX))]
View(dt)
View(dt)
dt[IF_EDS_Validas_T1.PMAX, on = c("nis"="NIS"), PMED := i.PMED*4/1000]
dt[,p_ratio_PMAX := PMED / PMAX]
View(dt)
dt[,plot(p_ratio, p_ratio_PMAX)]
dt[is.finite(p_ratio) & is.finite(p_ratio_PMAX),
.(.N, p_ratio =range(p_ratio), p_ratio_PMAX = range(p_ratio_PMAX))]
dt[is.finite(p_ratio) & is.finite(p_ratio_PMAX),
cor(.SD), .SDcols = c("p_ratio", "p_ratio_PMAX")]
View(dt)
dt[is.finite(p_ratio) & is.finite(p_ratio_PMAX),
cor(.SD), .SDcols = c("p_ratio", "p_ratio_PMAX")]
dt[is.finite(p_ratio) & is.finite(p_ratio_PMAX),
plot(.SD), .SDcols = c("p_ratio", "p_ratio_PMAX")]
dt[is.finite(p_ratio) & is.finite(p_ratio_PMAX),
plot(log(.SD)), .SDcols = c("p_ratio", "p_ratio_PMAX")]
dt[is.finite(p_ratio) & is.finite(p_ratio_PMAX),
plot(exp(.SD)), .SDcols = c("p_ratio", "p_ratio_PMAX")]
dt[is.finite(p_ratio) & is.finite(p_ratio_PMAX),
plot((.SD)), .SDcols = c("p_ratio", "p_ratio_PMAX")]
dt[is.finite(p_ratio) & is.finite(p_ratio_PMAX),
median(p_ratio_PMAX), .SDcols = c("p_ratio", "p_ratio_PMAX")]
dt[is.finite(p_ratio) & is.finite(p_ratio_PMAX),
median(p_ratio_PMAX)]
diff(c(10:15,17:19,21,22:24))
x = (c(10:15,17:19,21,22:24))
x[diff(x) = 1]
x[diff(x) == 1]
x[diff(x) != 1]
x[diff(x) == 1]
rleid(diff(x))
rle(diff(x))
rle(diff(x) - seq(x))
rle(x - seq(x))
x - seq(x)
x = c(10:15,17:19,21,23:24)
rle(x - seq(x))
rle(x - seq_along(x))
with(rle(x - seq_along(x)), list(lengths, values + seq_along(x))
x[diff(x) == 1]
with(rle(x - seq_along(x)), list(lengths, values + lengths))
with(rle(x - seq_along(x)), list(lengths, values ))
x = c(10:15,17:19,21,27:28)
with(rle(x - seq_along(x)), list(lengths, values ))
with(rle(x - seq_along(x)), list(lengths, rep(seq_len(values), lenghts) ))
with(rle(x - seq_along(x)), list(lengths, rep(seq_len(values), lengths) ))
with(rle(x - seq_along(x)), list(lengths, rep(seq_along(values), lengths) ))
r = with(rle(x - seq_along(x)), list(seqs = values, ids= rep(seq_along(values), lengths)))
r
r = with(rle(x - seq_along(x)), list(seqs = lengths, ids= rep(seq_along(values), lengths)))
r
gsub(".*", "", "a")
gsub(".*", "", "a\nb")
gsub(".*$", "", "a\nb")
sub(".*$", "", "a\nb")
sub(".*$", "i", "a\nb")
sub("(.*)", "\\1", "a\nb")
for (i in files) {
lines <- readLines(i)
# Asume que en msgid partido no hay lineas vacias intercaladas
pos <- grep("\\s*(msgid\\s+)?\"", lines)
writeLines(
con = paste0(i,".txt"),
with(rle(pos - seq_along(pos)), {
ids = rep(seq_along(values), lengths)
sapply(seq_along(values), \(j) {
paste0(sub("[^\"]*\"(.*)[^\"]*$", "\\1", lines[ids == j]), collapse="")
})
})
)
}
getwd()
getwd()
setwd(R"(C:\Users\AR30592993\Documents\R\translations\data.table\vignettes\es\po)")
getwd()
files = "datatable-benchmarking.Rmd-es.po"
lines <- readLines(i)
i = files
lines <- readLines(i)
pos <- grep("\\s*(msgid\\s+)?\"", lines)
pos[1:100]
# Asume que en msgid partido no hay lineas vacias intercaladas
pos <- grep("^\\s*(msgid\\s+)?\"", lines)
dt <- fread("GAM50142_202301_202312_SAP_ISU_cliente.txt.gz")
setwd("~\\..\\OneDrive - Enel Spa\\factu\\Facturaci√≥n 2023")
dt <- fread("GAM50142_202301_202312_SAP_ISU_cliente.txt.gz")
dt <- fread("GAM50142_202301_202312_SAP_ISU_clientes.txt.gz")
# hard coding for speed
m_types <- {
list(`T1-RESIDEN-R2-1` = c("T1", "RESIDEN", "R2", "1"), `T1-RESIDEN-R1-2` = c("T1",
"RESIDEN", "R1", "2"), `T1-RESIDEN-R2-2` = c("T1", "RESIDEN",
"R2", "2"), `T1-RESIDEN-R1-1` = c("T1", "RESIDEN", "R1", "1"),
`T1-RESIDEN-R1-3` = c("T1", "RESIDEN", "R1", "3"), `T1-RESIDEN-R3-2` = c("T1",
"RESIDEN", "R3", "2"), `T1-RESIDEN-R6-2` = c("T1", "RESIDEN",
"R6", "2"), `T1-RESIDEN-R3-1` = c("T1", "RESIDEN", "R3",
"1"), `T1-RESIDEN-R4-1` = c("T1", "RESIDEN", "R4", "1"),
`T1-RESIDEN-R4-2` = c("T1", "RESIDEN", "R4", "2"), T2 = c("T2",
"", "", ""), `T1-RESIDEN-R2-3` = c("T1", "RESIDEN", "R2",
"3"), `T1-RESIDEN-R8-3` = c("T1", "RESIDEN", "R8", "3"),
`T1-GEN-MED-G3-0` = c("T1", "GEN-MED", "G3", "0"), `T1-GEN-MED-G1-0` = c("T1",
"GEN-MED", "G1", "0"), `T1-RESIDEN-R2-0` = c("T1", "RESIDEN",
"R2", "0"), `T1-RESIDEN-R4-3` = c("T1", "RESIDEN", "R4",
"3"), `T1-RESIDEN-R8-2` = c("T1", "RESIDEN", "R8", "2"),
`T1-RESIDEN-R5-1` = c("T1", "RESIDEN", "R5", "1"), `T1-RESIDEN-R6-1` = c("T1",
"RESIDEN", "R6", "1"), `T1-RESIDEN-R3-3` = c("T1", "RESIDEN",
"R3", "3"), `T1-GEN-MED-G2-0` = c("T1", "GEN-MED", "G2",
"0"), `T1-RESIDEN-R7-2` = c("T1", "RESIDEN", "R7", "2"),
`T1-RESIDEN-R5-2` = c("T1", "RESIDEN", "R5", "2"), `T1-RESIDEN-R1-0` = c("T1",
"RESIDEN", "R1", "0"), `T1-RESIDEN-R8-1` = c("T1", "RESIDEN",
"R8", "1"), T3BT = c("T3BT", "", "", ""), `T1-RESIDEN-R4-0` = c("T1",
"RESIDEN", "R4", "0"), `T3BT-PEAJE` = c("T3BT", "", "PEAJE",
""), `T1-RESIDEN-R5-3` = c("T1", "RESIDEN", "R5", "3"), `T1-RESIDEN-R7-1` = c("T1",
"RESIDEN", "R7", "1"), `T1-RESIDEN-R9-2` = c("T1", "RESIDEN",
"R9", "2"), `T1-RESIDEN-R7-3` = c("T1", "RESIDEN", "R7",
"3"), `T1-RESIDEN-R6-3` = c("T1", "RESIDEN", "R6", "3"),
`T1-RESIDEN-R9-3` = c("T1", "RESIDEN", "R9", "3"), `T1-RESIDEN-R6-0` = c("T1",
"RESIDEN", "R6", "0"), `T1-RESIDEN-R3-0` = c("T1", "RESIDEN",
"R3", "0"), `T1-RESIDEN-R8-0` = c("T1", "RESIDEN", "R8",
"0"), T3MT = c("T3MT", "", "", ""), `T1-RESIDEN-R7-0` = c("T1",
"RESIDEN", "R7", "0"), `T1-AP-MED-AP-0` = c("T1", "AP-MED",
"AP", "0"), `T1-RESIDEN-R9-1` = c("T1", "RESIDEN", "R9",
"1"), `T1-RESIDEN-R9-0` = c("T1", "RESIDEN", "R9", "0"),
`T1-RESIDEN-R5-0` = c("T1", "RESIDEN", "R5", "0"), `T3-VILLAS` = c("T3",
"", "VILLAS", ""), `T3MT-PEAJE` = c("T3MT", "", "PEAJE",
""), `T1-GEN-NOM-G3-0` = c("T1", "GEN-NOM", "G3", "0"), `T3AT-PEAJE` = c("T3AT",
"", "PEAJE", ""), `T1-AP-NOM-AP-0` = c("T1", "AP-NOM", "AP",
"0"), `T2-PEAJE` = c("T2", "", "PEAJE", ""), `T1-GEN-NOM-G1-0` = c("T1",
"GEN-NOM", "G1", "0"), T3AT = c("T3AT", "", "", ""), `T1-GEN-NOM-G2-0` = c("T1",
"GEN-NOM", "G2", "0"))
}
dt[,by = cat_tarif, paste0("cat_tarif_",1:4) := as.list(m_types[[cat_tarif]])  ]
clipr::write_clip(dt[by = cat_tarif, tipo_conex,,.N ])
clipr::write_clip(dt[by = .(cat_tarif, tipo_conex),,.N ])
clipr::write_clip(dt[by = .(cat_tarif_1, tipo_conex),,.N ])
clipr::write_clip(dt[by = .(cat_tarif_1, tipo_conex),,.N ])
clipr::write_clip(dt[by = .(cat_tarif_1, cat_tarif_2, tipo_conex),,.N ])
lines <- readLines(i)
# Asume que en msgid partido no hay lineas vacias intercaladas
pos_msgid = grep("^\\s*(msgid(_plural)|msgstr)?.*", lines)
pos_msg <- grep("^\\s*(msg(id|str)\\s+)?\"", lines)
setwd("R(C:\Users\AR30592993\Documents\R\translations\data.table\vignettes\es\po)")
setwd(R"(C:\Users\AR30592993\Documents\R\translations\data.table\vignettes\es\po)")
files = "datatable-benchmarking.Rmd-es.po"
i = files
lines <- readLines(i)
# Asume que en msgid partido no hay lineas vacias intercaladas
pos_msgid = grep("^\\s*(msgid(_plural)|msgstr)?.*", lines)
pos_msg <- grep("^\\s*(msg(id|str)\\s+)?\"", lines)
# Asume que en msgid partido no hay lineas vacias intercaladas
#pos_msgid = grep("^\\s*(msgid(_plural)|msgstr)?.*", lines)
pos_msgid = grep("^\\s*(msg(id(_plural)?|str(\\[\\d\\])?)?.*", lines)
# Asume que en msgid partido no hay lineas vacias intercaladas
#pos_msgid = grep("^\\s*(msgid(_plural)|msgstr)?.*", lines)
pos_msgid = grep("^\\s*(msg(id(_plural)?|str(\\[\\d\\])?)).*", lines)
pos_lines = grep("^\\s*[^#]*\"(.*)\"\\s*$", lines)
pos_lines[100]
pos_lines[1:100]
# Asume que en msgid partido no hay lineas vacias intercaladas
#pos_msgid = grep("^\\s*(msgid(_plural)|msgstr)?.*", lines)
pos_msgid = grep("^\\s*msgid", lines)
writeLines(
con = paste0(i,".txt"),
ids_all = with(rle(pos_lines - seq_along(pos_lines)), rep(seq_along(values), lengths))
ids = ids_all[ids_all %in% ids_all[pos_msgid]]
ids_all = with(rle(pos_lines - seq_along(pos_lines)), rep(seq_along(values), lengths))
ids = ids_all[ids_all %in% ids_all[pos_msgid]]
ids_all
msg_all = with(rle(pos_lines - seq_along(pos_lines)), rep(seq_along(values), lengths))
msgall = with(rle(pos_lines - seq_along(pos_lines)), rep(seq_along(values), lengths))
seq_lines = with(rle(pos_lines - seq_along(pos_lines)), rep(seq_along(values), lengths))
seq_lines
# Asume que en msgid partido no hay lineas vacias intercaladas
#pos_msgid = grep("^\\s*(msgid(_plural)|msgstr)?.*", lines)
pos_lines = grep("^\\s*[^#]*\"(.*)\"\\s*$", lines)
pos_msgid = grep("^\\s*msgid", lines)
seq_lines = with(rle(pos_lines - seq_along(pos_lines)), rep(seq_along(values), lengths))
seq_msgid = pos_msgid %in% pos_lines
seq_msgid =  pos_lines %in% pos_msgid
seq_msgid =  seq_lines[pos_lines %in% pos_msgid]
msgid
msgid =  seq_lines[pos_lines %in% pos_msgid]
msgid
seq_lines = with(rle(pos_lines - seq_along(pos_lines)), rep(seq_along(values), lengths))
pos_lines %in% pos_msgid
pos_msgid = grep("^\\s*msgid", lines)
msgid =  seq_lines[pos_lines %in% pos_msgid]
msgid
# Asume que en msgid partido no hay lineas vacias intercaladas
#pos_msgid = grep("^\\s*(msgid(_plural)|msgstr)?.*", lines)
pos_lines = grep("^\\s*[^#]*\"(.*)\"\\s*$", lines)
pos_msgid = grep("^\\s*msgid", lines)
seq_lines = with(rle(pos_lines - seq_along(pos_lines)), rep(seq_along(values), lengths))
msgid =  seq_lines[pos_lines %in% pos_msgid]
seq_lines[pos_lines %in% pos_msgid]
lines <- readLines(i) |> grep(pattern = "^\\s*[^#]+", values= TRUE)
lines <- readLines(i) |> grep(pattern = "^\\s*[^#]+", value= TRUE)
lines
# Asume que en msgid partido no hay lineas vacias intercaladas
#pos_msgid = grep("^\\s*(msgid(_plural)|msgstr)?.*", lines)
pos_msgid = grep("^\\s*msgid", lines)
pos_wrapped = grep("^\\s*\".*\"\s*$", lines)
pos_wrapped = grep("^\\s*\".*\"\\s*$", lines)
pos_lines = sort(c(post_msgid, pos_wrapped))
pos_lines = sort(c(pos_msgid, pos_wrapped))
seq_lines = with(rle(pos_lines - seq_along(pos_lines)), rep(seq_along(values), lengths))
seq_lines[pos_lines %in% pos_msgid]
pos_lines
clipr::write_clip(lines)
# Asume que en msgid partido no hay lineas vacias intercaladas
#pos_msgid = grep("^\\s*(msgid(_plural)|msgstr)?.*", lines)
pos_msgid = grep("^\\s*msgid", lines)
pos_msgid
pos_wrapped = grep("^\\s*\".*\"\\s*$", lines)
pos_wrapped
pos_lines = sort(c(pos_msgid, pos_wrapped))
pos_lines
lines <- readLines(i) |> grep(pattern = "^\\s*(\"|msg)", value= TRUE)
lines
pos_msgid <- grep("^\\s*msgid", lines)
pos_msg <- grep("^\\s*msg", lines)
pos_msgend <- match(pos_msgid + 1, pos_msg, 0) - 1
clipr::write_clip(lines)
pos_msgid
pos_msg
pos_msglen <- match(pos_msgid, pos_msg, 0)
pos_msg <- grep("^\\s*msg", lines)
pos_msgid <- grep("^\\s*msgid", lines)
pos_msglen <- match(pos_msgid, pos_msg, 0)
pos_msglen <- pos_msg[match(pos_msgid, pos_msg, 0)]
pos_msglen <- pos_msg[match(pos_msgid, pos_msg, lenght(lines))+1]
pos_msglen <- pos_msg[match(pos_msgid, pos_msg, length(lines))+1]
pos_msglen <- pos_msg[match(pos_msgid, pos_msg, length(lines))+1]-1
pos_msglen
sapply(seq_along(pos_msgid), \(i)
paste0(sub("[^\"]*\"(.*)[^\"]*$", "\\1", lines[pos_msgid[i]:pos_msgid_end[i]]), collapse=""))
pos_msgid_end <- pos_msg[match(pos_msgid, pos_msg, length(lines))+1]-1
sapply(seq_along(pos_msgid), \(i)
paste0(sub("[^\"]*\"(.*)[^\"]*$", "\\1", lines[pos_msgid[i]:pos_msgid_end[i]]), collapse=""))
sapply(seq_along(pos_msgid), \(i)
paste0(sub("[^\"]*\"(.*)\"[^\"]*$", "\\1", lines[pos_msgid[i]:pos_msgid_end[i]]), collapse=""))
# *** OBSCURE ERROR WHEN Sys.timezone() = 'America/Argentina/Buenos_Aires' ***
test(1702.3, isoweek(as.POSIXct(test_cases)), test_values)
test_cases <- c("2005-01-01", "2005-01-02", "2005-12-31",
"2007-01-01", "2007-12-30", "2007-12-31",
"2008-01-01", "2008-12-28", "2008-12-29",
"2008-12-30", "2008-12-31", "2009-01-01",
"2009-12-31", "2010-01-01",
"2010-01-02", "2010-01-03",
#see https://stackoverflow.com/questions/43944430 & #2407
"2014-12-29", "2014-12-22", "2015-02-02")
test_values <- c(53L, 53L, 52L, 1L, 52L, 1L, 1L,
52L, 1L, 1L, 1L, 1L, 53L, 53L, 53L, 53L,
1L, 52L, 6L)
# *** OBSCURE ERROR WHEN Sys.timezone() = 'America/Argentina/Buenos_Aires' ***
isoweek(as.POSIXct(test_cases))
test_cases
Vectorize(as.POSIXct)(test_cases)
Vectorize(\(i) try(as.POSIXct(i)))(test_cases)
Vectorize(\(i) try(as.POSIXct(i)))(test_cases)
lapply(test_cases, \(i) try(as.POSIXct(i)))
as.POSIXct("2007-12-31")
as.POSIXct("2007-12-30")
as.POSIXct("2008-12-31")
as.POSIXct("2008-12-30")
as.POSIXct("2007-12-30")
as.POSIXct("2007-12-29")
as.POSIXct("2007-12-31")
shQuote("a", "cmd")
shQuote("a\"b", "cmd")
shQuote("a\"b", "sh")
shQuote("a\"b", "csh")
shQuote("a\"b", "cmd")
shQuote("a\"b", "cmd2")
shQuote("a\"b")
data.table:::catf
