#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-09-12 06:45-0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: Translate Toolkit 3.13.3\n"

#: es%5Cdatatable-secondary-indices-and-auto-indexing.Rmd.tmp%2Bp
msgid ""
"This vignette assumes that the reader is familiar with data.table's `[i, j, "
"by]` syntax, and how to perform fast key based subsets. If you're not "
"familiar with these concepts, please read the *\"Introduction to data.table"
"\"*, *\"Reference semantics\"* and *\"Keys and fast binary search based "
"subset\"* vignettes first."
msgstr ""
"This vignette assumes that the reader is familiar with data.table's `[i, j, "
"by]` syntax, and how to perform fast key based subsets. If you're not "
"familiar with these concepts, please read the *\"Introduction to data.table"
"\"*, *\"Reference semantics\"* and *\"Keys and fast binary search based "
"subset\"* vignettes first."

#: es%5Cdatatable-secondary-indices-and-auto-indexing.Rmd.tmp%2Bheading
msgid "Data {#data}"
msgstr "Data {#data}"

#: es%5Cdatatable-secondary-indices-and-auto-indexing.Rmd.tmp%2Bp
msgid ""
"We will use the same `flights` data as in the *\"Introduction to data.table"
"\"* vignette."
msgstr ""
"We will use the same `flights` data as in the *\"Introduction to data.table"
"\"* vignette."

#: es%5Cdatatable-secondary-indices-and-auto-indexing.Rmd.tmp%2Bheading
msgid "Introduction"
msgstr "Introduction"

#: es%5Cdatatable-secondary-indices-and-auto-indexing.Rmd.tmp%2Bp
msgid "In this vignette, we will"
msgstr "In this vignette, we will"

#: es%5Cdatatable-secondary-indices-and-auto-indexing.Rmd.tmp%2Bp
msgid ""
"=====* discuss *secondary indices* and provide rationale as to why we need "
"them by citing cases where setting keys is not necessarily ideal,====="
msgstr ""
"=====* discuss *secondary indices* and provide rationale as to why we need "
"them by citing cases where setting keys is not necessarily ideal,====="

#: es%5Cdatatable-secondary-indices-and-auto-indexing.Rmd.tmp%2Bp
msgid ""
"=====* perform fast subsetting, once again, but using the new `on` argument, "
"which computes secondary indices internally for the task (temporarily), and "
"reuses if one already exists,====="
msgstr ""
"=====* perform fast subsetting, once again, but using the new `on` argument, "
"which computes secondary indices internally for the task (temporarily), and "
"reuses if one already exists,====="

#: es%5Cdatatable-secondary-indices-and-auto-indexing.Rmd.tmp%2Bp
msgid ""
"=====* and finally look at *auto indexing* which goes a step further and "
"creates secondary indices automatically, but does so on native R syntax for "
"subsetting.====="
msgstr ""
"=====* and finally look at *auto indexing* which goes a step further and "
"creates secondary indices automatically, but does so on native R syntax for "
"subsetting.====="

#: es%5Cdatatable-secondary-indices-and-auto-indexing.Rmd.tmp%2Bheading
msgid "1. Secondary indices"
msgstr "1. Secondary indices"

#: es%5Cdatatable-secondary-indices-and-auto-indexing.Rmd.tmp%2Bheading
msgid "a) What are secondary indices?"
msgstr "a) What are secondary indices?"

#: es%5Cdatatable-secondary-indices-and-auto-indexing.Rmd.tmp%2Bp
msgid ""
"Secondary indices are similar to `keys` in *data.table*, except for two "
"major differences:"
msgstr ""
"Secondary indices are similar to `keys` in *data.table*, except for two "
"major differences:"

#: es%5Cdatatable-secondary-indices-and-auto-indexing.Rmd.tmp%2Bp
msgid ""
"=====* It *doesn't* physically reorder the entire data.table in RAM. "
"Instead, it only computes the order for the set of columns provided and "
"stores that *order vector* in an additional attribute called `index`.====="
msgstr ""
"=====* It *doesn't* physically reorder the entire data.table in RAM. "
"Instead, it only computes the order for the set of columns provided and "
"stores that *order vector* in an additional attribute called `index`.====="

#: es%5Cdatatable-secondary-indices-and-auto-indexing.Rmd.tmp%2Bp
msgid ""
"=====* There can be more than one secondary index for a data.table (as we "
"will see below).====="
msgstr ""
"=====* There can be more than one secondary index for a data.table (as we "
"will see below).====="

#: es%5Cdatatable-secondary-indices-and-auto-indexing.Rmd.tmp%2Bheading
msgid "b) Set and get secondary indices"
msgstr "b) Set and get secondary indices"

#: es%5Cdatatable-secondary-indices-and-auto-indexing.Rmd.tmp%2Bheading
msgid ""
"-- How can we set the column `origin` as a secondary index in the *data."
"table* `flights`?"
msgstr ""
"-- How can we set the column `origin` as a secondary index in the *data."
"table* `flights`?"

#: es%5Cdatatable-secondary-indices-and-auto-indexing.Rmd.tmp%2Bp
msgid ""
"=====* `setindex` and `setindexv()` allows adding a secondary index to the "
"data.table.====="
msgstr ""
"=====* `setindex` and `setindexv()` allows adding a secondary index to the "
"data.table.====="

#: es%5Cdatatable-secondary-indices-and-auto-indexing.Rmd.tmp%2Bp
msgid ""
"=====* Note that `flights` is **not** physically reordered in increasing "
"order of `origin`, as would have been the case with `setkey()`.====="
msgstr ""
"=====* Note that `flights` is **not** physically reordered in increasing "
"order of `origin`, as would have been the case with `setkey()`.====="

#: es%5Cdatatable-secondary-indices-and-auto-indexing.Rmd.tmp%2Bp
msgid ""
"=====* Also note that the attribute `index` has been added to `flights`.====="
msgstr ""
"=====* Also note that the attribute `index` has been added to `flights`.====="

#: es%5Cdatatable-secondary-indices-and-auto-indexing.Rmd.tmp%2Bp
msgid ""
"=====* `setindex(flights, NULL)` would remove all secondary indices.====="
msgstr ""
"=====* `setindex(flights, NULL)` would remove all secondary indices.====="

#: es%5Cdatatable-secondary-indices-and-auto-indexing.Rmd.tmp%2Bheading
msgid "-- How can we get all the secondary indices set so far in `flights`?"
msgstr "-- How can we get all the secondary indices set so far in `flights`?"

#: es%5Cdatatable-secondary-indices-and-auto-indexing.Rmd.tmp%2Bp
msgid ""
"=====* The function `indices()` returns all current secondary indices in the "
"data.table. If none exists, `NULL` is returned.====="
msgstr ""
"=====* The function `indices()` returns all current secondary indices in the "
"data.table. If none exists, `NULL` is returned.====="

#: es%5Cdatatable-secondary-indices-and-auto-indexing.Rmd.tmp%2Bp
msgid ""
"=====* Note that by creating another index on the columns `origin, dest`, we "
"do not lose the first index created on the column `origin`, i.e., we can "
"have multiple secondary indices.====="
msgstr ""
"=====* Note that by creating another index on the columns `origin, dest`, we "
"do not lose the first index created on the column `origin`, i.e., we can "
"have multiple secondary indices.====="

#: es%5Cdatatable-secondary-indices-and-auto-indexing.Rmd.tmp%2Bheading
msgid "c) Why do we need secondary indices?"
msgstr "c) Why do we need secondary indices?"

#: es%5Cdatatable-secondary-indices-and-auto-indexing.Rmd.tmp%2Bheading
msgid "-- Reordering a data.table can be expensive and not always ideal"
msgstr "-- Reordering a data.table can be expensive and not always ideal"

#: es%5Cdatatable-secondary-indices-and-auto-indexing.Rmd.tmp%2Bp
msgid ""
"Consider the case where you would like to perform a fast key based subset on "
"`origin` column for the value \"JFK\". We'd do this as:"
msgstr ""
"Consider the case where you would like to perform a fast key based subset on "
"`origin` column for the value \"JFK\". We'd do this as:"

#: es%5Cdatatable-secondary-indices-and-auto-indexing.Rmd.tmp%2Bheading
msgid "`setkey()` requires:"
msgstr "`setkey()` requires:"

#: es%5Cdatatable-secondary-indices-and-auto-indexing.Rmd.tmp%2Bp
msgid ""
"a) computing the order vector for the column(s) provided, here, `origin`, and"
msgstr ""
"a) computing the order vector for the column(s) provided, here, `origin`, and"

#: es%5Cdatatable-secondary-indices-and-auto-indexing.Rmd.tmp%2Bp
msgid ""
"b) reordering the entire data.table, by reference, based on the order vector "
"computed."
msgstr ""
"b) reordering the entire data.table, by reference, based on the order vector "
"computed."

#: es%5Cdatatable-secondary-indices-and-auto-indexing.Rmd.tmp%2Bp
msgid ""
"Computing the order isn't the time consuming part, since data.table uses "
"true radix sorting on integer, character and numeric vectors. However, "
"reordering the data.table could be time consuming (depending on the number "
"of rows and columns)."
msgstr ""
"Computing the order isn't the time consuming part, since data.table uses "
"true radix sorting on integer, character and numeric vectors. However, "
"reordering the data.table could be time consuming (depending on the number "
"of rows and columns)."

#: es%5Cdatatable-secondary-indices-and-auto-indexing.Rmd.tmp%2Bp
msgid ""
"Unless our task involves repeated subsetting on the same column, fast key "
"based subsetting could effectively be nullified by the time to reorder, "
"depending on our data.table dimensions."
msgstr ""
"Unless our task involves repeated subsetting on the same column, fast key "
"based subsetting could effectively be nullified by the time to reorder, "
"depending on our data.table dimensions."

#: es%5Cdatatable-secondary-indices-and-auto-indexing.Rmd.tmp%2Bheading
msgid "-- There can be only one `key` at the most"
msgstr "-- There can be only one `key` at the most"

#: es%5Cdatatable-secondary-indices-and-auto-indexing.Rmd.tmp%2Bp
msgid ""
"Now if we would like to repeat the same operation but on `dest` column "
"instead, for the value \"LAX\", then we have to `setkey()`, *again*."
msgstr ""
"Now if we would like to repeat the same operation but on `dest` column "
"instead, for the value \"LAX\", then we have to `setkey()`, *again*."

#: es%5Cdatatable-secondary-indices-and-auto-indexing.Rmd.tmp%2Bp
msgid ""
"And this reorders `flights` by `dest`, *again*. What we would really like is "
"to be able to perform the fast subsetting by eliminating the reordering step."
msgstr ""
"And this reorders `flights` by `dest`, *again*. What we would really like is "
"to be able to perform the fast subsetting by eliminating the reordering step."

#: es%5Cdatatable-secondary-indices-and-auto-indexing.Rmd.tmp%2Bp
msgid "And this is precisely what *secondary indices* allow for!"
msgstr "And this is precisely what *secondary indices* allow for!"

#: es%5Cdatatable-secondary-indices-and-auto-indexing.Rmd.tmp%2Bheading
msgid "-- Secondary indices can be reused"
msgstr "-- Secondary indices can be reused"

#: es%5Cdatatable-secondary-indices-and-auto-indexing.Rmd.tmp%2Bp
msgid ""
"Since there can be multiple secondary indices, and creating an index is as "
"simple as storing the order vector as an attribute, this allows us to even "
"eliminate the time to recompute the order vector if an index already exists."
msgstr ""
"Since there can be multiple secondary indices, and creating an index is as "
"simple as storing the order vector as an attribute, this allows us to even "
"eliminate the time to recompute the order vector if an index already exists."

#: es%5Cdatatable-secondary-indices-and-auto-indexing.Rmd.tmp%2Bheading
msgid ""
"-- The new `on` argument allows for cleaner syntax and automatic creation "
"and reuse of secondary indices"
msgstr ""
"-- The new `on` argument allows for cleaner syntax and automatic creation "
"and reuse of secondary indices"

#: es%5Cdatatable-secondary-indices-and-auto-indexing.Rmd.tmp%2Bp
msgid ""
"As we will see in the next section, the `on` argument provides several "
"advantages:"
msgstr ""
"As we will see in the next section, the `on` argument provides several "
"advantages:"

#: es%5Cdatatable-secondary-indices-and-auto-indexing.Rmd.tmp%2Bheading
msgid "`on` argument"
msgstr "`on` argument"

#: es%5Cdatatable-secondary-indices-and-auto-indexing.Rmd.tmp%2Bp
msgid ""
"=====* enables subsetting by computing secondary indices on the fly. This "
"eliminates having to do `setindex()` every time.====="
msgstr ""
"=====* enables subsetting by computing secondary indices on the fly. This "
"eliminates having to do `setindex()` every time.====="

#: es%5Cdatatable-secondary-indices-and-auto-indexing.Rmd.tmp%2Bp
msgid ""
"=====* allows easy reuse of existing indices by just checking the attributes."
"====="
msgstr ""
"=====* allows easy reuse of existing indices by just checking the attributes."
"====="

#: es%5Cdatatable-secondary-indices-and-auto-indexing.Rmd.tmp%2Bp
msgid ""
"=====* allows for a cleaner syntax by having the columns on which the subset "
"is performed as part of the syntax. This makes the code easier to follow "
"when looking at it at a later point.====="
msgstr ""
"=====* allows for a cleaner syntax by having the columns on which the subset "
"is performed as part of the syntax. This makes the code easier to follow "
"when looking at it at a later point.====="

#: es%5Cdatatable-secondary-indices-and-auto-indexing.Rmd.tmp%2Bheading
msgid "2. Fast subsetting using `on` argument and secondary indices"
msgstr "2. Fast subsetting using `on` argument and secondary indices"

#: es%5Cdatatable-secondary-indices-and-auto-indexing.Rmd.tmp%2Bheading
msgid "a) Fast subsets in `i`"
msgstr "a) Fast subsets in `i`"

#: es%5Cdatatable-secondary-indices-and-auto-indexing.Rmd.tmp%2Bheading
msgid ""
"-- Subset all rows where the origin airport matches *\"JFK\"* using `on`"
msgstr ""
"-- Subset all rows where the origin airport matches *\"JFK\"* using `on`"

#: es%5Cdatatable-secondary-indices-and-auto-indexing.Rmd.tmp%2Bp
msgid ""
"=====* This statement performs a fast binary search based subset as well, by "
"computing the index on the fly. However, note that it doesn't save the index "
"as an attribute automatically. This may change in the future.====="
msgstr ""
"=====* This statement performs a fast binary search based subset as well, by "
"computing the index on the fly. However, note that it doesn't save the index "
"as an attribute automatically. This may change in the future.====="

#: es%5Cdatatable-secondary-indices-and-auto-indexing.Rmd.tmp%2Bp
msgid ""
"=====* If we had already created a secondary index, using `setindex()`, then "
"`on` would reuse it instead of (re)computing it. We can see that by using "
"`verbose = TRUE`:====="
msgstr ""
"=====* If we had already created a secondary index, using `setindex()`, then "
"`on` would reuse it instead of (re)computing it. We can see that by using "
"`verbose = TRUE`:====="

#: es%5Cdatatable-secondary-indices-and-auto-indexing.Rmd.tmp%2Bheading
msgid "-- How can I subset based on `origin` *and* `dest` columns?"
msgstr "-- How can I subset based on `origin` *and* `dest` columns?"

#: es%5Cdatatable-secondary-indices-and-auto-indexing.Rmd.tmp%2Bp
msgid "For example, if we want to subset `\"JFK\", \"LAX\"` combination, then:"
msgstr ""
"For example, if we want to subset `\"JFK\", \"LAX\"` combination, then:"

#: es%5Cdatatable-secondary-indices-and-auto-indexing.Rmd.tmp%2Bp
msgid ""
"=====* `on` argument accepts a character vector of column names "
"corresponding to the order provided to `i-argument`.====="
msgstr ""
"=====* `on` argument accepts a character vector of column names "
"corresponding to the order provided to `i-argument`.====="

#: es%5Cdatatable-secondary-indices-and-auto-indexing.Rmd.tmp%2Bp
msgid ""
"=====* Since the time to compute the secondary index is quite small, we "
"don't have to use `setindex()`, unless, once again, the task involves "
"repeated subsetting on the same column.====="
msgstr ""
"=====* Since the time to compute the secondary index is quite small, we "
"don't have to use `setindex()`, unless, once again, the task involves "
"repeated subsetting on the same column.====="

#: es%5Cdatatable-secondary-indices-and-auto-indexing.Rmd.tmp%2Bheading
msgid "b) Select in `j`"
msgstr "b) Select in `j`"

#: es%5Cdatatable-secondary-indices-and-auto-indexing.Rmd.tmp%2Bp
msgid ""
"All the operations we will discuss below are no different to the ones we "
"already saw in the *Keys and fast binary search based subset* vignette. "
"Except we'll be using the `on` argument instead of setting keys."
msgstr ""
"All the operations we will discuss below are no different to the ones we "
"already saw in the *Keys and fast binary search based subset* vignette. "
"Except we'll be using the `on` argument instead of setting keys."

#: es%5Cdatatable-secondary-indices-and-auto-indexing.Rmd.tmp%2Bheading
msgid ""
"-- Return `arr_delay` column alone as a data.table corresponding to `origin "
"= \"LGA\"` and `dest = \"TPA\"`"
msgstr ""
"-- Return `arr_delay` column alone as a data.table corresponding to `origin "
"= \"LGA\"` and `dest = \"TPA\"`"

#: es%5Cdatatable-secondary-indices-and-auto-indexing.Rmd.tmp%2Bheading
msgid "c) Chaining"
msgstr "c) Chaining"

#: es%5Cdatatable-secondary-indices-and-auto-indexing.Rmd.tmp%2Bheading
msgid ""
"-- On the result obtained above, use chaining to order the column in "
"decreasing order."
msgstr ""
"-- On the result obtained above, use chaining to order the column in "
"decreasing order."

#: es%5Cdatatable-secondary-indices-and-auto-indexing.Rmd.tmp%2Bheading
msgid "d) Compute or *do* in `j`"
msgstr "d) Compute or *do* in `j`"

#: es%5Cdatatable-secondary-indices-and-auto-indexing.Rmd.tmp%2Bheading
msgid ""
"-- Find the maximum arrival delay corresponding to `origin = \"LGA\"` and "
"`dest = \"TPA\"`."
msgstr ""
"-- Find the maximum arrival delay corresponding to `origin = \"LGA\"` and "
"`dest = \"TPA\"`."

#: es%5Cdatatable-secondary-indices-and-auto-indexing.Rmd.tmp%2Bheading
msgid "e) *sub-assign* by reference using `:=` in `j`"
msgstr "e) *sub-assign* by reference using `:=` in `j`"

#: es%5Cdatatable-secondary-indices-and-auto-indexing.Rmd.tmp%2Bp
msgid ""
"We have seen this example already in the *Reference semantics* and *Keys and "
"fast binary search based subset* vignette. Let's take a look at all the "
"`hours` available in the `flights` *data.table*:"
msgstr ""
"We have seen this example already in the *Reference semantics* and *Keys and "
"fast binary search based subset* vignette. Let's take a look at all the "
"`hours` available in the `flights` *data.table*:"

#: es%5Cdatatable-secondary-indices-and-auto-indexing.Rmd.tmp%2Bp
msgid ""
"We see that there are totally `25` unique values in the data. Both *0* and "
"*24* hours seem to be present. Let's go ahead and replace *24* with *0*, but "
"this time using `on` instead of setting keys."
msgstr ""
"We see that there are totally `25` unique values in the data. Both *0* and "
"*24* hours seem to be present. Let's go ahead and replace *24* with *0*, but "
"this time using `on` instead of setting keys."

#: es%5Cdatatable-secondary-indices-and-auto-indexing.Rmd.tmp%2Bp
msgid "Now, let's check if `24` is replaced with `0` in the `hour` column."
msgstr "Now, let's check if `24` is replaced with `0` in the `hour` column."

#: es%5Cdatatable-secondary-indices-and-auto-indexing.Rmd.tmp%2Bp
msgid ""
"=====* This is particularly a huge advantage of secondary indices. "
"Previously, just to update a few rows of `hour`, we had to `setkey()` on it, "
"which inevitably reorders the entire data.table. With `on`, the order is "
"preserved, and the operation is much faster! Looking at the code, the task "
"we wanted to perform is also quite clear.====="
msgstr ""
"=====* This is particularly a huge advantage of secondary indices. "
"Previously, just to update a few rows of `hour`, we had to `setkey()` on it, "
"which inevitably reorders the entire data.table. With `on`, the order is "
"preserved, and the operation is much faster! Looking at the code, the task "
"we wanted to perform is also quite clear.====="

#: es%5Cdatatable-secondary-indices-and-auto-indexing.Rmd.tmp%2Bheading
msgid "f) Aggregation using `by`"
msgstr "f) Aggregation using `by`"

#: es%5Cdatatable-secondary-indices-and-auto-indexing.Rmd.tmp%2Bheading
msgid ""
"-- Get the maximum departure delay for each `month` corresponding to `origin "
"= \"JFK\"`. Order the result by `month`"
msgstr ""
"-- Get the maximum departure delay for each `month` corresponding to `origin "
"= \"JFK\"`. Order the result by `month`"

#: es%5Cdatatable-secondary-indices-and-auto-indexing.Rmd.tmp%2Bp
msgid ""
"=====* We would have had to set the `key` back to `origin, dest` again, if "
"we did not use `on` which internally builds secondary indices on the fly."
"====="
msgstr ""
"=====* We would have had to set the `key` back to `origin, dest` again, if "
"we did not use `on` which internally builds secondary indices on the fly."
"====="

#: es%5Cdatatable-secondary-indices-and-auto-indexing.Rmd.tmp%2Bheading
msgid "g) The *mult* argument"
msgstr "g) The *mult* argument"

#: es%5Cdatatable-secondary-indices-and-auto-indexing.Rmd.tmp%2Bp
msgid ""
"The other arguments including `mult` work exactly the same way as we saw in "
"the *Keys and fast binary search based subset* vignette. The default value "
"for `mult` is \"all\". We can choose, instead only the \"first\" or \"last\" "
"matching rows should be returned."
msgstr ""
"The other arguments including `mult` work exactly the same way as we saw in "
"the *Keys and fast binary search based subset* vignette. The default value "
"for `mult` is \"all\". We can choose, instead only the \"first\" or \"last\" "
"matching rows should be returned."

#: es%5Cdatatable-secondary-indices-and-auto-indexing.Rmd.tmp%2Bheading
msgid ""
"-- Subset only the first matching row where `dest` matches *\"BOS\"* and *"
"\"DAY\"*"
msgstr ""
"-- Subset only the first matching row where `dest` matches *\"BOS\"* and *"
"\"DAY\"*"

#: es%5Cdatatable-secondary-indices-and-auto-indexing.Rmd.tmp%2Bheading
msgid ""
"-- Subset only the last matching row where `origin` matches *\"LGA\", \"JFK"
"\", \"EWR\"* and `dest` matches *\"XNA\"*"
msgstr ""
"-- Subset only the last matching row where `origin` matches *\"LGA\", \"JFK"
"\", \"EWR\"* and `dest` matches *\"XNA\"*"

#: es%5Cdatatable-secondary-indices-and-auto-indexing.Rmd.tmp%2Bheading
msgid "h) The *nomatch* argument"
msgstr "h) The *nomatch* argument"

#: es%5Cdatatable-secondary-indices-and-auto-indexing.Rmd.tmp%2Bp
msgid ""
"We can choose if queries that do not match should return `NA` or be skipped "
"altogether using the `nomatch` argument."
msgstr ""
"We can choose if queries that do not match should return `NA` or be skipped "
"altogether using the `nomatch` argument."

#: es%5Cdatatable-secondary-indices-and-auto-indexing.Rmd.tmp%2Bheading
msgid "-- From the previous example, subset all rows only if there's a match"
msgstr "-- From the previous example, subset all rows only if there's a match"

#: es%5Cdatatable-secondary-indices-and-auto-indexing.Rmd.tmp%2Bp
msgid ""
"=====* There are no flights connecting \"JFK\" and \"XNA\". Therefore, that "
"row is skipped in the result.====="
msgstr ""
"=====* There are no flights connecting \"JFK\" and \"XNA\". Therefore, that "
"row is skipped in the result.====="

#: es%5Cdatatable-secondary-indices-and-auto-indexing.Rmd.tmp%2Bheading
msgid "3. Auto indexing"
msgstr "3. Auto indexing"

#: es%5Cdatatable-secondary-indices-and-auto-indexing.Rmd.tmp%2Bp
msgid ""
"First we looked at how to fast subset using binary search using *keys*. Then "
"we figured out that we could improve performance even further and have "
"cleaner syntax by using secondary indices."
msgstr ""
"First we looked at how to fast subset using binary search using *keys*. Then "
"we figured out that we could improve performance even further and have "
"cleaner syntax by using secondary indices."

#: es%5Cdatatable-secondary-indices-and-auto-indexing.Rmd.tmp%2Bp
msgid ""
"That is what *auto indexing* does. At the moment, it is only implemented for "
"binary operators `==` and `%in%`. An index is automatically created *and* "
"saved as an attribute. That is, unlike the `on` argument which computes the "
"index on the fly each time (unless one already exists), a secondary index is "
"created here."
msgstr ""
"That is what *auto indexing* does. At the moment, it is only implemented for "
"binary operators `==` and `%in%`. An index is automatically created *and* "
"saved as an attribute. That is, unlike the `on` argument which computes the "
"index on the fly each time (unless one already exists), a secondary index is "
"created here."

#: es%5Cdatatable-secondary-indices-and-auto-indexing.Rmd.tmp%2Bp
msgid ""
"Let's start by creating a data.table big enough to highlight the advantage."
msgstr ""
"Let's start by creating a data.table big enough to highlight the advantage."

#: es%5Cdatatable-secondary-indices-and-auto-indexing.Rmd.tmp%2Bp
msgid ""
"When we use `==` or `%in%` on a single column for the first time, a "
"secondary index is created automatically, and it is used to perform the "
"subset."
msgstr ""
"When we use `==` or `%in%` on a single column for the first time, a "
"secondary index is created automatically, and it is used to perform the "
"subset."

#: es%5Cdatatable-secondary-indices-and-auto-indexing.Rmd.tmp%2Bp
msgid ""
"The time to subset the first time is the time to create the index + the time "
"to subset. Since creating a secondary index involves only creating the order "
"vector, this combined operation is faster than vector scans in many cases. "
"But the real advantage comes in successive subsets. They are extremely fast."
msgstr ""
"The time to subset the first time is the time to create the index + the time "
"to subset. Since creating a secondary index involves only creating the order "
"vector, this combined operation is faster than vector scans in many cases. "
"But the real advantage comes in successive subsets. They are extremely fast."

#: es%5Cdatatable-secondary-indices-and-auto-indexing.Rmd.tmp%2Bp
msgid ""
"=====* Running the first time took `r sprintf(\"%.3f\", t1[\"elapsed\"])` "
"seconds where as the second time took `r sprintf(\"%.3f\", t2[\"elapsed\"])` "
"seconds.====="
msgstr ""
"=====* Running the first time took `r sprintf(\"%.3f\", t1[\"elapsed\"])` "
"seconds where as the second time took `r sprintf(\"%.3f\", t2[\"elapsed\"])` "
"seconds.====="

#: es%5Cdatatable-secondary-indices-and-auto-indexing.Rmd.tmp%2Bp
msgid ""
"=====* Auto indexing can be disabled by setting the global argument "
"`options(datatable.auto.index = FALSE)`.====="
msgstr ""
"=====* Auto indexing can be disabled by setting the global argument "
"`options(datatable.auto.index = FALSE)`.====="

#: es%5Cdatatable-secondary-indices-and-auto-indexing.Rmd.tmp%2Bp
msgid ""
"=====* Disabling auto indexing still allows to use indices created "
"explicitly with `setindex` or `setindexv`. You can disable indices fully by "
"setting global argument `options(datatable.use.index = FALSE)`.====="
msgstr ""
"=====* Disabling auto indexing still allows to use indices created "
"explicitly with `setindex` or `setindexv`. You can disable indices fully by "
"setting global argument `options(datatable.use.index = FALSE)`.====="

#: es%5Cdatatable-secondary-indices-and-auto-indexing.Rmd.tmp%2Bp
msgid ""
"In recent version we extended auto indexing to expressions involving more "
"than one column (combined with `&` operator). In the future, we plan to "
"extend binary search to work with more binary operators like `<`, `<=`, `>` "
"and `>=`."
msgstr ""
"In recent version we extended auto indexing to expressions involving more "
"than one column (combined with `&` operator). In the future, we plan to "
"extend binary search to work with more binary operators like `<`, `<=`, `>` "
"and `>=`."

#: es%5Cdatatable-secondary-indices-and-auto-indexing.Rmd.tmp%2Bp
msgid ""
"We will discuss fast *subsets* using keys and secondary indices to *joins* "
"in the next vignette, *\"Joins and rolling joins\"*."
msgstr ""
"We will discuss fast *subsets* using keys and secondary indices to *joins* "
"in the next vignette, *\"Joins and rolling joins\"*."
